diff --git a/tools/coqmktop.ml b/tools/coqmktop.ml
index be796e6..a70a4ee 100644
--- a/tools/coqmktop.ml
+++ b/tools/coqmktop.ml
@@ -46,6 +46,8 @@ let module_of_file name =
     We do not use [Sys.command] anymore, see comment in [CUnix.sys_command].
 *)
 let run_command prog args =
+  Printf.eprintf "%s \n%!" prog;
+  List.iter (Printf.eprintf "%s %!") args;
   match CUnix.sys_command prog args with
   | Unix.WEXITED 127 -> failwith ("no such command "^prog)
   | Unix.WEXITED n -> n
@@ -112,13 +114,16 @@ let libobjs = ocaml_libs @ camlp4_libs
 
 let ocaml_topobjs =
   if is_ocaml4 then
-    ["ocamlcommon.cma";"ocamlbytecomp.cma";"ocamltoplevel.cma"]
+    []
+  (* This produces Toplevel bytecode executable is corrupted *)
+  (* ["ocamlcommon.cma";"ocamlbytecomp.cma";"ocamltoplevel.cma"] *)
   else
     ["toplevellib.cma"]
 
 let camlp4_topobjs =
   if is_camlp5 then
-    ["camlp5_top.cma"; "pa_o.cmo"; "pa_extend.cmo"]
+    []
+    (* ["camlp5_top.cma"; "pa_o.cmo"; "pa_extend.cmo"] *)
   else
     [ "Camlp4Top.cmo";
       "Camlp4Parsers/Camlp4OCamlRevisedParser.cmo";
@@ -247,11 +252,11 @@ let create_tmp_main_file modules =
   let main_name,oc = Filename.open_temp_file "coqmain" ".ml" in
   try
     (* Add the pre-linked modules *)
-    output_string oc "List.iter Mltop.add_known_module [\"";
-    output_string oc (String.concat "\";\"" modules);
-    output_string oc "\"];;\n";
+    (* output_string oc "List.iter Mltop.add_known_module [\""; *)
+    (* output_string oc (String.concat "\";\"" modules); *)
+    (* output_string oc "\"];;\n"; *)
     (* Initializes the kind of loading *)
-    output_string oc (declare_loading_string());
+    (* output_string oc (declare_loading_string()); *)
     (* Start the toplevel loop *)
     if not !no_start then output_string oc "Coqtop.start();;\n";
     close_out oc;
@@ -273,7 +278,8 @@ let main () =
   (* Which arguments ? *)
   if !opt && !top then failwith "no custom toplevel in native code !";
   let flags = if !opt then [] else Coq_config.vmbyteflags in
-  let topstart = if !top then [ "topstart.cmo" ] else [] in
+  (* let topstart = if !top then [ "topstart.cmo" ] else [] in *)
+  let topstart = if !top then [ ] else [] in
   let (modules, tolink) = files_to_link userfiles in
   let main_file = create_tmp_main_file modules in
   try
diff --git a/toplevel/coqtop.ml b/toplevel/coqtop.ml
index ca379cb..827733b 100644
--- a/toplevel/coqtop.ml
+++ b/toplevel/coqtop.ml
@@ -510,7 +510,7 @@ let parse_args arglist =
     |"-unicode" -> add_require "Utf8_core"
     |"-v"|"--version" -> Usage.version (exitcode ())
     |"-verbose-compat-notations" -> verb_compat_ntn := true
-    |"-vm" -> use_vm := true
+    |"-vm" -> use_vm := false
     |"-where" -> print_where := true
 
     (* Deprecated options *)
@@ -554,12 +554,12 @@ let init arglist =
       (* If we have been spawned by the Spawn module, this has to be done
        * early since the master waits us to connect back *)
       Spawned.init_channels ();
-      Envars.set_coqlib Errors.error;
+      (* Envars.set_coqlib Errors.error; *)
       if !print_where then (print_endline(Envars.coqlib ()); exit(exitcode ()));
       if !print_config then (Usage.print_config (); exit (exitcode ()));
       if !print_tags then (print_style_tags (); exit (exitcode ()));
       if !filter_opts then (print_string (String.concat "\n" extras); exit 0);
-      init_load_path ();
+      (* init_load_path (); *)
       Option.iter Mltop.load_ml_object_raw !toploop;
       let extras = !toploop_init extras in
       if not (List.is_empty extras) then begin
@@ -581,9 +581,9 @@ let init arglist =
       then Option.iter Declaremods.start_library !toplevel_name;
       init_library_roots ();
       load_vernac_obj ();
-      require ();
+      (* require (); *)
       Stm.init ();
-      load_rcfile();
+      (* load_rcfile(); *)
       load_vernacular ();
       compile_files ();
       schedule_vio_checking ();
