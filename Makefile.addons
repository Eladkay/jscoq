
# Makefile for addons

# XXX: Move to a common makefile
all:

all-addons: mtac ssr-libs coquelicot flocq tlc color sf cpdt hott dsp plugin-utils cel mirror-core

# XXX: We should include the common addon makefile thing.

########################################################################
# Addons: coq-plugins-utils                                            #
########################################################################
PU_HOME=~/external/coq/coq-plugin-utils
PU_DEST=coq-pkgs/PluginUtils

$(PU_DEST):
	mkdir -p $(PU_DEST)

PU_PLUG=$(PU_HOME)/src/plugin_utils.cmo

plugin-utils: $(PU_DEST)
	$(shell cp -a $(PU_PLUG) $(PU_DEST))
	rsync -ap $(wildcard $(PU_HOME)/theories/*.vo) $(PU_DEST)/

########################################################################
# Addons: coq-ext-lib                                                  #
########################################################################
CEL_HOME=~/external/coq/coq-ext-lib/
CEL_DEST=coq-pkgs/ExtLib

$(CEL_DEST):
	mkdir -p $(CEL_DEST)

CEL_MODULES=$(addprefix $(CEL_HOME)/theories/,Core Data Generic Programming Recur Relations Structures Tactics)
# CEL_MODULES=$(addprefix $(CEL_HOME)/theories/,Core Data Data/Eq Data/Monads Data/Graph Data/Map Data/Monads Data/Set Generic Programming Recur Relations Structures Tactics)
cel: $(CEL_DEST)
	rsync -ap $(wildcard $(CEL_HOME)/theories/*.vo) $(CEL_DEST)/
	rsync -ap --exclude='*.v' --exclude='*.aux' --exclude='*.glob' --exclude='*.d' --exclude='*.timing' $(CEL_MODULES) $(CEL_DEST)

########################################################################
# Addons: mirror-core                                                  #
########################################################################
MC_HOME=~/external/coq/mirror-core/
MC_DEST=coq-pkgs/MirrorCore
MCEX_DEST=coq-pkgs/McExamples

$(MC_DEST):
	mkdir -p $(MC_DEST)

$(MCEX_DEST):
	mkdir -p $(MCEX_DEST)

MC_PLUG=$(MC_HOME)/src/reify_Lambda_plugin.cma
MC_MODULES=$(addprefix $(MC_HOME)/theories/,Lambda MTypes Reify RTac Subst syms Util Views)

mirror-core: $(MC_DEST) $(MCEX_DEST)
	$(shell cp -a $(MC_PLUG) $(MC_DEST))
	rsync -ap $(wildcard $(MC_HOME)/theories/*.vo) $(MC_DEST)/
	rsync -ap --exclude='*.v' --exclude='*.aux' --exclude='*.glob' --exclude='*.d' --exclude='*.timing' $(MC_MODULES) $(MC_DEST)
	rsync -ap --exclude='*.v' --exclude='*.aux'	    	        \
	  --exclude='*.glob' --exclude='*.d' --exclude='*.timing'	\
	  $(MC_HOME)/examples/ $(MCEX_DEST)/

########################################################################
# Addons: mtac                                                         #
########################################################################

MTAC_HOME=~/external/coq/mtac-plugin/
MTAC_PLUG=$(MTAC_HOME)/src/mtac.cma

MTAC_DEST=coq-pkgs/Mtac
MTAC_FILES=$(wildcard $(MTAC_HOME)/theories/*.vo)

# XXX: Use a pattern rule!
$(MTAC_DEST):
	mkdir -p $(MTAC_DEST)

mtac: $(MTAC_DEST) $(MTAC_PLUG) $(MTAC_FILES)
	$(shell cp -a $(MTAC_PLUG) $(MTAC_DEST)/mtac.cma)
	$(shell for i in $(MTAC_FILES); do cp -a $$i $(MTAC_DEST)/`basename $$i`; done)


########################################################################
# Addons: ssreflect                                                    #
########################################################################

SSR_HOME=~/external/coq/math-comp/mathcomp/
SSR_PLUG=$(SSR_HOME)/ssreflect.cma

SSR_DEST=coq-pkgs/mathcomp/ssreflect
SSR_FILES=$(wildcard $(SSR_HOME)/ssreflect/*.vo)

# XXX: Use a pattern rule!
$(SSR_DEST):
	mkdir -p $(SSR_DEST)

ssr: $(SSR_DEST) $(SSR_PLUG) $(SSR_FILES)
	$(shell cp -a $(SSR_PLUG) $(SSR_DEST)/ssreflect.cma)
	$(shell for i in $(SSR_FILES); do cp -a $$i $(SSR_DEST)/`basename $$i`; done)

SSR_ALG_DEST=coq-pkgs/mathcomp/algebra
SSR_ALG_FILES=$(wildcard $(SSR_HOME)/algebra/*.vo)

$(SSR_ALG_DEST):
	mkdir -p $(SSR_ALG_DEST)

ssr-alg: $(SSR_ALG_DEST) $(SSR_ALG_FILES)
	$(shell for i in $(SSR_ALG_FILES); do cp -a $$i $(SSR_ALG_DEST)/`basename $$i`; done)

SSR_FIN_DEST=coq-pkgs/mathcomp/fingroup
SSR_FIN_FILES=$(wildcard $(SSR_HOME)/fingroup/*.vo)

$(SSR_FIN_DEST):
	mkdir -p $(SSR_FIN_DEST)

ssr-fin: $(SSR_FIN_DEST) $(SSR_FIN_FILES)
	$(shell for i in $(SSR_FIN_FILES); do cp -a $$i $(SSR_FIN_DEST)/`basename $$i`; done)

SSR_SOL_DEST=coq-pkgs/mathcomp/solvable
SSR_SOL_FILES=$(wildcard $(SSR_HOME)/solvable/*.vo)

$(SSR_SOL_DEST):
	mkdir -p $(SSR_SOL_DEST)

ssr-sol: $(SSR_SOL_DEST) $(SSR_SOL_FILES)
	$(shell for i in $(SSR_SOL_FILES); do cp -a $$i $(SSR_SOL_DEST)/`basename $$i`; done)

SSR_FLD_DEST=coq-pkgs/mathcomp/field
SSR_FLD_FILES=$(wildcard $(SSR_HOME)/field/*.vo)

$(SSR_FLD_DEST):
	mkdir -p $(SSR_FLD_DEST)

ssr-fld: $(SSR_FLD_DEST) $(SSR_FLD_FILES)
	$(shell for i in $(SSR_FLD_FILES); do cp -a $$i $(SSR_FLD_DEST)/`basename $$i`; done)

ssr-libs: ssr ssr-alg ssr-fin ssr-sol ssr-fld

########################################################################
# Addons: coquelicot                                                   #
########################################################################

COQCOT_HOME=~/external/coq/coquelicot
COQCOT_DEST=coq-pkgs/Coquelicot
COQCOT_FILES=$(wildcard $(COQCOT_HOME)/theories/*.vo)

$(COQCOT_DEST):
	mkdir -p $(COQCOT_DEST)

coquelicot: $(COQCOT_DEST) $(COQCOT_FILES)
	$(shell for i in $(COQCOT_FILES); do cp -a $$i $(COQCOT_DEST)/`basename $$i`; done)

########################################################################
# Addons: flocq                                                        #
########################################################################

# XXX: Must make a generic method for this
FLOCQ_HOME=~/external/coq/flocq/
FLOCQ_DEST=coq-pkgs/Flocq/Core
FLOCQ_FILES=$(wildcard $(FLOCQ_HOME)/src/Core/*.vo)

$(FLOCQ_DEST):
	mkdir -p $(FLOCQ_DEST)

flocq: $(FLOCQ_DEST) $(FLOCQ_FILES)
	$(shell for i in $(FLOCQ_FILES); do cp -a $$i $(FLOCQ_DEST)/`basename $$i`; done)

########################################################################
# Addons: HoTT                                                        #
########################################################################

# XXX: Must make a generic method for this
HOTT_HOME=~/external/HoTT/
HOTT_DEST=coq-pkgs/HoTT

$(HOTT_DEST):
	mkdir -p $(HOTT_DEST)

HOTT_MODULES=$(addprefix $(HOTT_HOME)/theories/,Algebra categories Basics Comodalities hit Modalities Spaces Tactics Types)
hott: $(HOTT_DEST)
	rsync -ap $(wildcard $(HOTT_HOME)/theories/*.vo) $(HOTT_DEST)/
	rsync -ap --exclude='*.v' --exclude='*.aux' --exclude='*.glob' --exclude='*.d' --exclude='*.timing' $(HOTT_MODULES) $(HOTT_DEST)

########################################################################
# Addons: UniMath                                                      #
########################################################################

# XXX: Must make a generic method for this
UNIM_HOME=~/external/coq/UniMath/
UNIM_DEST=coq-pkgs/UniMath

$(UNIM_DEST):
	mkdir -p $(UNIM_DEST)

unimath: $(UNIM_DEST)
	rsync -ap --exclude='*.v' --exclude='*.aux' --exclude='*.glob' --exclude='*.d' --exclude='*.timing' \
		--exclude='.package' --exclude='README.md' $(UNIM_HOME)/UniMath/ $(UNIM_DEST)

########################################################################
# Addons: tlc                                                        #
########################################################################

# XXX: Must make a generic method for this
TLC_HOME=~/external/coq/tlc/src
TLC_DEST=coq-pkgs/TLC
TLC_FILES=$(wildcard $(TLC_HOME)/*.vo)

$(TLC_DEST):
	mkdir -p $(TLC_DEST)

tlc: $(TLC_DEST) $(TLC_FILES)
	$(shell for i in $(TLC_FILES); do cp -a $$i $(TLC_DEST)/`basename $$i`; done)

########################################################################
# Addons: dsp                                                          #
########################################################################

# XXX: Must make a generic method for this
DSP_HOME=~/external/coq/dsp
DSP_DEST=coq-pkgs/Dsp
DSP_FILES=$(wildcard $(DSP_HOME)/*.vo)

$(DSP_DEST):
	mkdir -p $(DSP_DEST)

dsp: $(DSP_DEST) $(DSP_FILES)
	$(shell for i in $(DSP_FILES); do cp -a $$i $(DSP_DEST)/`basename $$i`; done)

########################################################################
# Addons: SF                                                           #
########################################################################

# XXX: Must make a generic method for this
SF_HOME=~/external/coq/sf/
SF_DEST=coq-pkgs/SF
SF_FILES=$(wildcard $(SF_HOME)/*.vo)

$(SF_DEST):
	mkdir -p $(SF_DEST)

sf: $(SF_DEST) $(SF_FILES)
	$(shell for i in $(SF_FILES); do cp -a $$i $(SF_DEST)/`basename $$i`; done)

########################################################################
# Addons: Cpdt                                                         #
########################################################################

# Warning NON-FREE

# XXX: Must make a generic method for this
CPDT_HOME=~/external/coq/cpdt/
CPDT_DEST=coq-pkgs/Cpdt
# CPDT_FILES=$(wildcard $(CPDT_HOME)/src/*.vo)

# These are free files under BSD
CPDT_FILES=$(addprefix $(CPDT_HOME)/src/, CpdtTactics.vo MoreSpecif.vo DepList.vo)

$(CPDT_DEST):
	mkdir -p $(CPDT_DEST)

cpdt: $(CPDT_DEST) $(CPDT_FILES)
	$(shell for i in $(CPDT_FILES); do cp -a $$i $(CPDT_DEST)/`basename $$i`; done)

# XXX: Move to common
COQDIR=~/external/coq-git-32/
JOBS=8

########################################################################
# Addons: ColoR                                                        #
########################################################################

# XXX: Must make a generic method for this
COLOR_HOME=~/external/coq/CoLoR-8.5/color/
COLOR_DEST=coq-pkgs/
TMPDIR=/tmp/
JSCOQ_DIR=~/research/jscoq/coq-pkgs/

color:
	cd $(COLOR_HOME); make install DSTROOT=$(TMPDIR)
	rm -rf $(JSCOQ_DIR)/CoLoR
	mv /tmp/home/egallego/external/coq-git-32/user-contrib/CoLoR/ $(JSCOQ_DIR)/

########################################################################
# Addons: relalg                                                       #
########################################################################

relalg:
RELALG_HOME=~/external/coq/relation-algebra-1.4/
RELALG_DEST=coq-pkgs/RelationAlgebra
RELALG_FILES=$(wildcard $(RELALG_HOME)/*.vo)
RELALG_CMA=$(addprefix $(RELALG_HOME), ra_common.cmo kat_reification.cma ra_fold.cmo mrewrite.cmo ra_reification.cmo)

$(RELALG_DEST):
	mkdir -p $(RELALG_DEST)

relalg: $(RELALG_DEST) $(RELALG_FILES)
	$(shell for i in $(RELALG_FILES); do cp -a $$i $(RELALG_DEST)/`basename $$i`; done)
	$(shell for i in $(RELALG_CMA); do cp -a $$i $(RELALG_DEST)/`basename $$i`; done)

# XXX: Move to common
COQDIR=~/external/coq-git-32/
JOBS=

all-build-clean:
	export PATH=$(COQDIR)/bin:$$PATH; cd $(SSR_HOME);      make clean || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(COQCOT_HOME); ./remake clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(FLOCQ_HOME);  ./remake clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(TLC_HOME);      make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(SF_HOME);       make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(CPDT_HOME);     make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(COLOR_HOME);    make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(RELALG_HOME);   make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(MTAC_HOME);     make clean || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(HOTT_HOME);     make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(DSP_HOME);      make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(UNIM_HOME);     make clean
	export PATH=$(COQDIR)/bin:$$PATH; cd $(CEL_HOME);      make clean

all-build: all-build-ssr all-build-std

all-build-ssr:
	export PATH=$(COQDIR)/bin:$$PATH; cd $(SSR_HOME);      make -j $(JOBS) || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(COQCOT_HOME); ./remake          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(FLOCQ_HOME);  ./remake          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(DSP_HOME);      make -j $(JOBS)          || true

all-build-std:
	export PATH=$(COQDIR)/bin:$$PATH; cd $(MTAC_HOME);     make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(SF_HOME);       make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(CPDT_HOME);     make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(HOTT_HOME);     make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(TLC_HOME);      make -j $(JOBS) proof_vo || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(RELALG_HOME);   make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(COLOR_HOME);    make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(UNIM_HOME);     make -j $(JOBS)          || true
	export PATH=$(COQDIR)/bin:$$PATH; cd $(CEL_HOME);      make || true


