diff --git a/vernac/declaremods.ml b/vernac/declaremods.ml
index 54dda09..c17db7c 100644
--- a/vernac/declaremods.ml
+++ b/vernac/declaremods.ml
@@ -18,6 +18,11 @@ open Libnames
 open Libobject
 open Mod_subst
 
+let rec list_fold_right_cps f l init k =
+  match l with
+  | [] -> k init
+  | x :: xs -> list_fold_right_cps f xs init (fun res -> k (f x res))
+
 (** {6 Inlining levels} *)
 
 (** Rigid / flexible module signature *)
@@ -302,7 +307,7 @@ and collect_object i (name, obj as o) acc =
   | ModuleObject _ | ModuleTypeObject _ -> mark_object o acc
 
 and collect_objects i prefix objs acc =
-  List.fold_right (fun (id, obj) acc -> collect_object i (Lib.make_oname prefix id, obj) acc) objs acc
+  list_fold_right_cps (fun (id, obj) acc -> collect_object i (Lib.make_oname prefix id, obj) acc) objs acc (fun x -> x)
 
 and collect_one_export mp (exports,objs as acc) =
   if not (MPset.mem mp exports) then
@@ -311,7 +316,7 @@ and collect_one_export mp (exports,objs as acc) =
 
 and collect_export i mpl acc =
   if Int.equal i 1 then
-    List.fold_right collect_one_export mpl acc
+    list_fold_right_cps collect_one_export mpl acc (fun x -> x)
   else acc
 
 let rec open_object i (name, obj) =
@@ -585,11 +590,11 @@ let intern_args params =
 
 let check_sub mtb sub_mtb_l =
   (* The constraints are checked and forgot immediately : *)
-  ignore (List.fold_right
+  ignore (list_fold_right_cps
             (fun sub_mtb env ->
                Environ.add_constraints
                  (Subtyping.check_subtypes env mtb sub_mtb) env)
-            sub_mtb_l (Global.env()))
+            sub_mtb_l (Global.env()) (fun x -> x))
 
 (** This function checks if the type calculated for the module [mp] is
     a subtype of all signatures in [sub_mtb_l]. Uses only the global
@@ -1023,7 +1028,7 @@ let end_library ?except ~output_native_objects dir =
   cenv,(substitute,keep),ast
 
 let import_modules ~export mpl =
-  let _,objs = List.fold_right collect_module_objects mpl (MPset.empty, []) in
+  let _,objs = list_fold_right_cps collect_module_objects mpl (MPset.empty, []) (fun x -> x) in
   List.iter (open_object 1) objs;
   if export then Lib.add_anonymous_entry (Lib.Leaf (ExportObject { mpl }))
 
